# @app.route('/food/add', methods=['POST'])
# def posst_info():


#     if not g.user:
#         flash("Access unauthorized.", "danger")
#         return redirect("/")

    

#     form = FoodForm()

#     if form.validate_on_submit():
#         food_name = form.food_name.data
#         food_list_spot = FoodList.query.filter(FoodList.food_name == food_name).all()
#         if food_list_spot:
#             food_id = food_list_spot[0].id
#             user = g.user.id
#             amount = form.amount.data
#             new_food = Food(food_id=food_id, user_id=user, amount=amount)
#             db.session.add(new_food)
#             db.session.commit()
#             return redirect('/homepage')
#         else:
#             flash('Not in database. Add it! Bottom right.')
#             return redirect('/homepage')

#     else:
#         return redirect('/homepage')






# @app.route('/food/<food_id>/update', methods=['POST', 'GET'])
# def update_info(food_id):
#     #Update a food 


#     if not g.user:
#         flash("Access unauthorized.", "danger")
#         return redirect("/")

#     food = Food.query.get_or_404(food_id)
#     form = UpdateFoodForm(obj=food)
#     symptomslist = []
#     for each in food.symptoms:
#         symptomslist.append(each.symptom_name)
        
#     # form = ExampleForm()
#     symptoms = [(c.id, c.symptom_name) for c in Symptom.query.all()]
#     form.symptoms.choices = symptoms

#     if form.validate_on_submit():
        
#         food_name = form.food_name.data
#         food_list_spot = FoodList.query.filter(FoodList.food_name == food_name).all()
#         food.food_id = food_list_spot[0].id
#         food.amount = form.amount.data
#         food.feeling = form.feeling.data
#         symptoms = form.symptoms.data
#         food.symptoms.clear()
#         for each in symptoms:
#             symptom = Symptom.query.get_or_404(each)
#             food.symptoms.append(symptom)
        
#         db.session.add(food)
#         db.session.commit()
#         return redirect('/homepage')

#     else:
#         return render_template('/food/food-update.html', form=form, food=food, symptomslist=symptomslist)

#Searching Routes

@app.route('/food/search', methods=['GET', 'POST'])
def search():
    #Search for a food by name. Return all matches


    form = SearchForm()
    allfoods = FoodList.query.all()

    if form.validate_on_submit():
        foodname = form.food_name.data
        food_list_spot = FoodList.query.filter(FoodList.food_name == foodname).all()
        try:
            food = food_list_spot[0]
        except:
            food = {'food_name': 'No data on this food'}
            
            return render_template('/search/search-food.html', food = food, form=form)
        # paverage = Food.query.filter(Food.food_id == food_list_spot[0].id).all()
        # averagelist = []
        # for each in paverage:
        #     if each.feeling != 'Null':
        #         averagelist.append(int(each.feeling))
        # print(f'%%%%%%%%%%%{averagelist}')
        # average = sum(averagelist) / len(averagelist)

        # food_id = food_list_spot[0]
        # food = Food.query.filter(Food.food_id == food_id).first()

        return render_template('/search/search-food.html', food = food, form=form)

    else:
        
        return render_template('/search/search-food.html', form=form, allfoods=allfoods)


@app.route('/food/database/add', methods=['GET','POST'])
def addtodatabase():
    """"""

    if not g.user:
        flash('Please login first!')
        return redirect('/login')
    form = SearchAddForm()
    form2 = AddSearchForm()
    form3 = SearchSpoonacular()
    form4 = AddSpoonacular()
    allfoods = FoodList.query.all()

    # if form.validate_on_submit():
    #     foodname = form.search_food_name.data
    #     allfoods = FoodList.query.filter(FoodList.food_name.like(f"%{foodname}%")).all()
    #     return render_template('allfoods.html', allfoods=allfoods, form=form, form2=form2)
        
    if form3.validate_on_submit():
        foodname = form3.spoonacular_food_name.data
        apifoods1 = requests.get(f'https://api.spoonacular.com/food/ingredients/search?query={foodname}&number=5&apiKey=b7e7c1efd70843b7a897ec8eb3717e34').json()
        apifoods = apifoods1['results']
        
        
        return render_template('allfoods.html', apifoods=apifoods, form=form, form2=form2, form3=form3)

    elif form2.validate_on_submit():
        foodname = form2.add_food_name.data
        new_food = FoodList(food_name=foodname)
        db.session.add(new_food)
        db.session.commit()
        flash(f'{foodname} added to database.')
        return redirect('/homepage')


    return render_template('allfoods.html', allfoods=allfoods, form=form, form2=form2, form3=form3, form4=form4)


@app.route("/food/<food>/add", methods=['GET','POST'])
def addspoontodatabase(food):
    """"""

    if not g.user:
        flash('Please login first!')
        return redirect('/login')
    food1 = eval(food)
    foodid = int(food1['id'])
    foodname = food1['name']
    foodimage = food1['image']
    new_food = FoodList(food_name=foodname, spoonacular_id=foodid, spoonacular_image=foodimage)
    db.session.add(new_food)
    db.session.commit()
    flash(f'{foodname} added to database.')
    
    return redirect('/homepage')



@app.route('/foodlist', methods=['GET'])
def foodlist():
    foodlist = FoodList.query.all()

    if not g.user:
        flash('Please login first!')
        return redirect('/login')

    foodnamelist = []
    for each in foodlist:
        name = each.food_name
        foodnamelist.append(name)
    return jsonify(foodnamelist)


symptoms = ['acid reflux', 'diarrhea', 'constipation', 'heart burn', 'bloating', 'naseau', 'gas', 'upset stomach', 'abdominal pain', 'cramps', 'vomitting']


@app.route('/user/<user_id>', methods=['GET', 'POST'])
def display_specific_profile(user_id):

    if not g.user:
        flash('Please login first!')
        return redirect('/login')

    
    user = User.query.get_or_404(user_id)

    return render_template('/user/user-profile.html', user=user) 